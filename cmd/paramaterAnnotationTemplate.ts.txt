import { 
    ComponentHandler, ComponentHandlerInterface, 
    ObjBoxHelper, ObjBoxInterface, ScannedTemplate, 
    getFunName, registerMethodArguments 
} from "objbox"



//自定义class的成员方法的参数的注解%AnnotationName%的参数
export interface %AnnotationName%Arg {
    yourArg1: any // 注解参数1
    yourArg2: any // 注解参数2
}


/**
 * 自定义class的成员方法的参数的注解%AnnotationName%
 * @param yourArg1 
 * @param yourArg2 
 */
export function %AnnotationName%(options:%AnnotationName%Arg): ParameterDecorator {
    //利用异常栈信息获取当前函数名称，等效于let _annotationName = "%AnnotationName%"，之所以不用字符串常量是防止将函数名称修改之后忘记修改字符串常量（防呆）
    let _annotationName = getFunName(2);

    //@ts-ignore
    return function (target: any, key: string, index: number) {
        registerMethodArguments<%AnnotationName%Arg>(_annotationName, options, key, index, target)
    }
}
// 防止ts编译优化将函数名称擦除
Object.defineProperty(%AnnotationName%, "name", { value: "%AnnotationName%" });


/**
 * 实现注解 @%AnnotationName%(<%AnnotationName%Arg>) 功能
 */
@ComponentHandler()
export class %AnnotationName%AnnotationHandler implements ComponentHandlerInterface {
    // 模板刚扫描完成
    scanned(objbox: ObjBoxInterface, template: ScannedTemplate) {
        let methodInfoAnno = ObjBoxHelper.getMethodArgsAnnotationFromTemplate<%AnnotationName%Arg>(%AnnotationName%.name, template);
        if (methodInfoAnno.length > 0) {
            // 这里加工被扫描的组件模版
        }
    }
    // 组件刚创建完成
    afterCreated(objbox: ObjBoxInterface, template: ScannedTemplate, component: any) {
        let methodInfoAnno = ObjBoxHelper.getMethodArgsAnnotationFromComponent<%AnnotationName%Arg>(%AnnotationName%.name, component);
        if (methodInfoAnno.length > 0) {
            // 这里加工刚刚创建好但是并未进行任何注入的原始组件对象
        }
    }
    // 组件完成注入与配置
    afterCompleted(objbox: ObjBoxInterface, template: ScannedTemplate, component: any) {
        let methodInfoAnno = ObjBoxHelper.getMethodArgsAnnotationFromComponent<%AnnotationName%Arg>(%AnnotationName%.name, component);
        if (methodInfoAnno.length > 0) {
            // 这里加工完成对象注入的完全组件对象，此时对象还未被任何其他组件引用（现在是第一次）
        }
    }
    // objbox准备就绪
    beforeReady(objbox: ObjBoxInterface, template: ScannedTemplate, component: any) {
        let methodInfoAnno = ObjBoxHelper.getMethodArgsAnnotationFromComponent<%AnnotationName%Arg>(%AnnotationName%.name, component);
        if (methodInfoAnno.length > 0) {
            // objbox准备就绪，下一步就是整个框架开始运行
        }
    }
}